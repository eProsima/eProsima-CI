name: 'colcon_test'
description: 'Execute colcon test command with arguments given'

inputs:

  colcon_meta_file:
    description: colcon.meta file to set ctest options. If empty, it uses an empty file
    required: false
    default: ''

  colcon_test_args:
    description: 'args to pass to colcon test command (use ctest_args to set ctest arguments)'
    required: false
    default: ''

  colcon_test_args_default:
    description: 'Default args to pass to colcon test command (use ctest_args to set ctest arguments)'
    required: false
    default: '--event-handlers=console_direct+ --return-code-on-test-failure'

  ctest_args:
    description: 'args to pass to colcon test command'
    required: false
    default: ''

  ctest_args_default:
    description: 'Default args to pass to colcon test command'
    required: false
    default: '--timeout 60'

  packages_names:
    description: 'Name of the colcon packages to test'
    required: true

  workspace:
    description: 'Workspace where built has been done'
    required: false
    default: '${{ github.workspace }}'

  workspace_dependencies:
    description: 'Workspace to source where dependencies are'
    required: false
    default: ''

  test_report_artifact:
    description: >
      Name of the artifact to be uploaded containing the test report in JUnit format. It shall be unique within the workflow run.
      Default: test_report_<github.workflow>_<github.job>_<matrix.*>
    required: false
    default: ''

  upload_test_report_artifact:
    description: >
      Whether to upload the tests results as an artifact or not.
    required: false
    default: 'true'

outputs:
  ctest_results_path:
    description: "Path to test results"
    value: ${{ steps.test.outputs.ctest_results_path }}

runs:
  using: composite
  steps:

    - name: Install lxml
      uses: eProsima/eProsima-CI/ubuntu/install_python_packages@v0
      with:
        packages: lxml

    - name: Run tests with colcon
      id: test
      run: |
        echo "::group::Test colcon ${{ inputs.workspace }}"

        if [[ ! -z "${{ inputs.workspace_dependencies }}" ]]; then
          source ${{ inputs.workspace_dependencies }}/setup.bash
        fi

        cd ${{ inputs.workspace }}
        mkdir test_results
        echo "ctest_results_path=${{ inputs.workspace }}/test_results/" >> $GITHUB_OUTPUT

        echo "::endgroup::"

        set +e
        exit_code=0

        if [[ -z "${{ inputs.colcon_meta_file }}" ]]; then
          touch colcon.meta
          export COLCON_TEST_META_="colcon.meta"
        else
          export COLCON_TEST_META_="${{ inputs.colcon_meta_file }}"
        fi

        for package in ${{ inputs.packages_names }}; do
          echo "::group::Testing ${package} ..."

          test_results_file="${{ inputs.workspace }}/test_results/${package}_test_results.xml"

          colcon test \
            --metas ${COLCON_TEST_META_} \
            ${{ inputs.colcon_test_args_default }} \
            ${{ inputs.colcon_test_args }} \
            --packages-select ${package} \
            --ctest-args \
              ${{ inputs.ctest_args_default }} \
              ${{ inputs.ctest_args }} \
              --output-junit ${test_results_file}

          last_exit_code=$?

          if [ $last_exit_code -gt 0 ]; then
            exit_code=$last_exit_code
          fi

          if [[ -z "${{ inputs.colcon_meta_file }}" ]]; then
            rm colcon.meta
          fi

          # Translate CTest XML reports to jUnit in case CTest does not support '--output-junit'

          if [ ! -f ${test_results_file} ]
          then
            echo "::group::Translating ${package} test report to jUnit..."

            python3 ${{ github.action_path }}/../../resources/ctest2junit.py \
              --build-dir ${{ inputs.workspace }}/build/${package} \
              --xslt ${{ github.action_path }}/../../resources/ctest-to-junit.xsl \
              --output-junit ${test_results_file}

            echo "::endgroup::"
          fi

          echo "::endgroup::"
        done

        exit $exit_code

      shell: bash

    - name: Upload test report in JUnit format
      uses: eProsima/eProsima-CI/external/upload-artifact@v0
      if: ${{ inputs.upload_test_report_artifact == 'true' && !cancelled() }}
      with:
          name: ${{ inputs.test_report_artifact || format('test_report_{0}_{1}_{2}', github.workflow, github.job, join(matrix.*, '_')) }}
          path: ${{ inputs.workspace }}/test_results
