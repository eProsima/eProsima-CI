name: colcon_build
description: Use colcon build command to build multiple packages

inputs:

  colcon_meta_file:
    description: colcon.meta file to set cmake options. If empty, it uses a non-existing file
    required: false
    default: '__invalid.meta'

  colcon_build_args:
    description: Arguments to pass to colcon build command (use cmake_args input for CMake options)
    required: false
    default: ''

  colcon_build_args_default:
    description: Default arguments to pass to colcon build command (use cmake_args input for CMake options)
    required: false
    default: '--event-handlers=console_direct+'

  set_eprosima_flags:
    description: |
      This flag sets the compilation flags (CMAKE_CXX_FLAGS) for eProsima product testing.
      These are:
        - Warnigs as errors (/WX /W4)
    type: boolean
    required: false
    default: true

  cmake_args:
    description: CMake arguments
    required: false
    default: ''

  cmake_build_type:
    description: Set the cmake build type
    required: false
    default: Release

  workspace:
    description: Workspace to build
    required: false
    default: ${{ github.workspace }}

  workspace_dependencies:
    description: Workspace to source where dependencies are
    required: false
    default: ''

env:

    EPROSIMA_CXX_FLAGS: "-DCMAKE_CXX_FLAGS='/WX /W4'"

runs:
  using: composite
  steps:

    - name: Build workspace with colcon
      shell: pwsh
      run: |

        "::group::Build using colcon"

        if (${{ inputs.set_eprosima_flags }}) {
          # EPROSIMA_CXX_FLAGS is set first so that it can be overridden by cmake_args
          # in case the user wants to set its own flags. If that's the case and the user want's to use both flags,
          # it should set EPROSIMA_CXX_FLAGS in cmake_args.
          $env:CMAKE_ARGS = $env:EPROSIMA_CXX_FLAGS + " " + ${{ inputs.cmake_args }}
        } else {
          $env:CMAKE_ARGS = ${{ inputs.cmake_args }}
        }

        if (! [string]::IsNullOrEmpty("${{ inputs.workspace_dependencies }}")) {
          ${{ inputs.workspace_dependencies }}/setup.ps1
        }

        echo "Using colcon.meta file(s) <${{ inputs.colcon_meta_file }}>"

        cd ${{ inputs.workspace }}

        # Microsoft.VisualStudio.DevShell.dll file in the Visual Studio installation directories,
        # imports the associated PowerShell module,
        # and launches the Visual Studio development shell with the specified options
        ls -Path @(${Env:ProgramFiles},${Env:ProgramFiles(x86)}) -Filter '*Visual Studio*' -Directory  -ErrorAction SilentlyContinue |
        ls -R -Filter 'Microsoft.VisualStudio.DevShell.dll' | select -First 1 -OutVariable pwshmodule ; `
          Import-Module $pwshmodule;Enter-VsDevShell -SetDefaultWindowTitle -VsInstallPath $pwshmodule.Directory.Parent.Parent `
          -StartInPath (pwd) -DevCmdArguments '/arch=x64 /host_arch=x64'

        colcon build `
          --metas ${{ inputs.colcon_meta_file }} `
          ${{ inputs.colcon_build_args_default }} `
          ${{ inputs.colcon_build_args }} `
          --cmake-args `
            -DCMAKE_BUILD_TYPE=${{ inputs.cmake_build_type }} $env:CMAKE_ARGS

        "::endgroup::"
